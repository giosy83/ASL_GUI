function varargout = aslgui(varargin)
% ASLGUI Custom user interface to generate training data for ASL recognition system.
%       ASLGUI...
%
%   Created 4/9/12 MRE
%   Last Updated 4/11/12 MRE

% Declare non-UI data here so that they can be used in any functions in
% this GUI file. 
mInputArgs      =   varargin;   % Command line arguments when invoking the GUI
mOutputArgs     =   {};         % Variable for storing output when GUI returns
mSampleData     =   [];        % Sample data captured by this GUI
% Variables for supporting custom property/value pairs
mPropertyDefs   =   {...        % Custom property/value pairs of this GUI
                     'videowidth',  @localValidateInput, 'mVideoWidth';
                     'videoheight', @localValidateInput, 'mVideoHeight';
                     'datadir',     @localValidateInput, 'mDataDir'};
mDataFilePrefix =   [];         % selected prefix of training data file
mDataFile       =   [];         % selected name of training data file
tempDataDir     =   fullfile(cd,'training data\group1');
mDataDir        =   '';
                                % else use input property 'datafile'
% Shared data between aslgui and signPalette
mGetSignFcn     =   '';         % Function handle for getting the current 
                                % sign from the embedded signPalette

% Video Input
% videoFormat = 'YUY2_640x480'; % justin's PC
videoFormat = 'MJPG_640x480'; % jason's PC
vid = videoinput('winvideo',1,videoFormat);         %creates video input object

vid.ReturnedColorSpace = 'grayscale';   % turns the frame from RGB to grayscale
vid.FramesPerTrigger = Inf;             % we want it to acquire frames until the camera is stopped
set(vid,'TimerPeriod',5);               % run the TimerFcn every 5 seconds
set(vid,'TimerFcn',@mem_mon);           % use a callback function to monitor memory
triggerconfig(vid,'manual');            % starts acquiring frames only on manual trigger
vidRes = get(vid,'VideoResolution');    % should be 640x480
mVideoWidth     =   vidRes(1);          % else use input property 'videowidth'
mVideoHeight    =   vidRes(2);          % else use input property 'videoheight'
nBands = get(vid,'NumberOfBands');

wid = 640;      % width of image
hei = 480;      % height of image
scl = 0.1;      % scaling factor (e.g. 0.5 cuts the image in half)
wbox = 0.3125;  % percentage of width to keep (e.g. 0.5 means the middle half of the image is kept)
hbox = 0.625;   % percentage of height to keep

% GUI Dimensions (units are characters, unless otherwise noted)
x.Main = 100;
y.Main = 5;
width.Main = 140;
height.Main = 38;

x.Edge = 1.6;
y.Edge = 0.4;

y.Panel.FileSettings = 7;
y.Panel.Prediction = 8.77;
x.Panel.Prediction = 40;
height.line = 0.077;
width.Button = 17.8;
height.Button = 2.38;
x.Button = 2.4;
y.Button = 0.62;

pix2char = [7 19.9604]; %a_char = a_pixels./f;

% The following dimensions are determined based on the ones above
x.Panel.Video = width.Main-x.Panel.Prediction-3*x.Edge;
y.Panel.Video = height.Main-y.Panel.FileSettings-2*y.Edge-height.line-3*y.Button-height.Button;

% Create all the UI objects in this GUI here so that they can
% be used in any functions in this GUI
hMainFigure         = figure(...
                        'Units','characters',...
                        'MenuBar','none',...
                        'Toolbar','none',...
                        'Position',[x.Main,...
                                    y.Main,...
                                    width.Main,...
                                    height.Main],...
                        'WindowStyle', 'modal');
hFileSettingsPanel  = uipanel(...
                        'Parent',hMainFigure,...
                        'Units','characters',...
                        'Title','File Settings',...
                        'Clipping','on',...
                        'Position',[x.Edge,...
                                    height.Main-y.Panel.FileSettings-y.Edge,...
                                    width.Main-2*x.Edge,...
                                    y.Panel.FileSettings]);
hVideoPanel         = uipanel(...
                        'Parent',hMainFigure,...
                        'Units','characters',...
                        'Title','Video Stream',...
                        'Clipping','on',...
                        'Position',[x.Edge,...
                                    height.Main-y.Panel.FileSettings-y.Panel.Video-2*y.Edge,...
                                    x.Panel.Video,...
                                    y.Panel.Video]);
hPredictionPanel    = uipanel(...
                        'Parent',hMainFigure,...
                        'Units','characters',...
                        'Title','Prediction',...
                        'Clipping','on',...
                        'Position',[x.Edge+x.Panel.Video+x.Edge,...
                                    height.Main-y.Panel.FileSettings-y.Panel.Prediction-2*y.Edge,...
                                    x.Panel.Prediction,...
                                    y.Panel.Prediction]);
hPaletteContainer   = uipanel(...
                        'Parent',hMainFigure,...
                        'Units','characters',...
                        'Title','Palette',...
                        'Clipping','on',...
                        'Position',[x.Edge+x.Panel.Video+x.Edge,...
                                    height.Main-y.Panel.FileSettings-y.Panel.Video-2*y.Edge,...
                                    x.Panel.Prediction,...
                                    y.Panel.Video-y.Panel.Prediction-1*y.Edge]);
hSectionLine        = uipanel(...
                        'Parent',hMainFigure,...
                        'Units','characters',...
                        'HighlightColor',[0 0 0],...
                        'BorderType','line',...
                        'Title','',...
                        'Clipping','on',...
                        'Position',[x.Edge,...
                                    2*y.Button+height.Button,...
                                    width.Main-2*x.Edge,...
                                    height.line]);
hStartStopButton    = uicontrol(...
                        'Parent',hMainFigure,...
                        'Units','characters',...
                        'Position',[x.Button,...
                                    y.Button,...
                                    width.Button,...
                                    height.Button],...
                        'String','Start Camera',...
                        'Callback',@hStartStopButtonCallback);
hCaptureButton      = uicontrol(...
                        'Parent',hMainFigure,...
                        'Units','characters',...
                        'Position',[x.Button*2+width.Button,...
                                    y.Button,...
                                    width.Button,...
                                    height.Button],...
                        'String','Capture Frame',...
                        'Callback',@hCaptureButtonCallback);
hExitButton         = uicontrol(...
                        'Parent',hMainFigure,...
                        'Units','characters',...
                        'Position',[width.Main-x.Button-width.Button,...
                                    y.Button,...
                                    width.Button,...
                                    height.Button],...
                        'String','Exit',...
                        'Callback',@hExitButtonCallback);
hDataDirText        = uicontrol(...
                        'Parent',hFileSettingsPanel,...
                        'Units','characters',...
                        'HorizontalAlignment','right',...
                        'Position',[2,...
                                    3.5,...
                                    14,...
                                    2],...
                        'String','Directory: ',...
                        'Style','text');
hDataDirEdit        = uicontrol(...
                        'Parent',hFileSettingsPanel,...
                        'Units','characters',...
                        'HorizontalAlignment','left',...
                        'Position',[17,...
                                    4.3,...
                                    111,...
                                    1.4],...
                        'String','Set training data directory',...
                        'Enable','inactive',...
                        'Style','edit',...
                        'ButtondownFcn',@hDataDirEditButtondownFcn,...
                        'Callback',@hDataDirEditCallback);
hDataDirButton      = uicontrol(...
                        'Parent',hFileSettingsPanel,...
                        'Units','characters',...
                        'Callback',@hDataDirButtonCallback,...
                        'Position',[128,...
                                    4.25,...
                                    5.8,...
                                    1.5],...
                        'String','...',...
                        'TooltipString','Select Folder');
hDataFilePrefixText = uicontrol(...
                        'Parent',hFileSettingsPanel,...
                        'Units','characters',...
                        'HorizontalAlignment','right',...
                        'Position',[2,...
                                    1.8,...
                                    14,...
                                    2],...
                        'String','Filename Prefix: ',...
                        'Style','text');
hDataFilePrefixEdit = uicontrol(...
                        'Parent',hFileSettingsPanel,...
                        'Units','characters',...
                        'HorizontalAlignment','left',...
                        'Position',[17,...
                                    2.6,...
                                    111,...
                                    1.4],...
                        'String','Set training data filename prefix',...
                        'Enable','inactive',...
                        'Style','edit',...
                        'ButtondownFcn',@hDataFilePrefixEditButtondownFcn,...
                        'Callback',@hDataFilePrefixEditCallback);
hDataFileText       = uicontrol(...
                        'Parent',hFileSettingsPanel,...
                        'Units','characters',...
                        'HorizontalAlignment','right',...
                        'Position',[2,...
                                    0.6,...
                                    14,...
                                    1],...
                        'String','Filename: ',...
                        'Style','text');
hDataFilename       = uicontrol(...
                        'Parent',hFileSettingsPanel,...
                        'Units','characters',...
                        'HorizontalAlignment','left',...
                        'Position',[17,...
                                    0.7,...
                                    80,...
                                    1],...
                        'String','Set directory and prefix first...',...
                        'Style','text',...
                        'FontSize',10,...
                        'ForegroundColor',[1 0 0],...
                        'FontWeight','bold');
hVideoAxes          = axes(...
                        'Parent',hVideoPanel,...
                        'vis','off',...
                        'Units','characters',...
                        'Position',[x.Edge,...
                                    1.5*y.Edge,...
                                    mVideoWidth/pix2char(1),...
                                    mVideoHeight/pix2char(2)]);
hImage              = image(...
                         zeros(mVideoHeight,mVideoWidth,nBands),...
                         'Parent',hVideoAxes);
hold on
plot([0.5*(1-wbox)*wid, 0.5*(1-wbox)*wid, 0.5*(1+wbox)*wid, 0.5*(1+wbox)*wid,0.5*(1-wbox)*wid],...
     [0.5*(1-hbox)*hei, 0.5*(1+hbox)*hei, 0.5*(1+hbox)*hei, 0.5*(1-hbox)*hei,0.5*(1-hbox)*hei],...
     'g','LineWidth',2)
hold off
set(hVideoAxes,'vis','off');
hPredictionControl  = uicontrol(...
                        'Parent',hPredictionPanel,...
                        'Units','characters',...
                        'Enable','inactive',...
                        'Visible','off',...
                        'Position',[2,...
                                    3.77,...
                                    16.2,...
                                    5.46],...
                        'String','');

% Host the signPalette in the PaletteContainer and keep the function
% handle for getting its selected color for editing icon
mGetSignFcn    =   signPalette('parent',hPaletteContainer);

% Make changes needed for proper look and feel and running on different
% platforms 
prepareLayout(hMainFigure);                            

% Process the command line input arguments supplied when the GUI is
% invoked 
processUserInputs();                            

% Initialize the aslgui using the defaults or custom data given through
% property/value pairs
localUpdate();

% Make the GUI on screen
set(hMainFigure,'visible', 'on');
movegui(hMainFigure,'onscreen');
set(hMainFigure,'Name','TRAIN American Sign Language (ASL) Recognition System');

% Make the GUI blocking
uiwait(hMainFigure);

% Return the edited SampleData if it is requested
mOutputArgs{1} =mSampleData;
if nargout>0
    [varargout{1:nargout}] = mOutputArgs{:};
end

% Delete and clear the video object
delete(vid)
clear vid
    
    %------------------------------------------------------------------
    function mem_mon(hObject, eventdata)
    % Callback called every 5 seconds
        out = imaqmem;

        mem_left = out.FrameMemoryLimit - out.FrameMemoryUsed;

        msg = 'Memory left for frames';
        msg2 = 'Memory load';
        low_limit = 200000000;

        if(mem_left > low_limit)
%             str = sprintf('%s: %d \n%s: %d',msg, mem_left,msg2, out.MemoryLoad); disp(str);
        else
%             disp('Memory available for frames getting low.');
%             disp('Flushing data.')
            flushdata(vid);
        end
    end

    %------------------------------------------------------------------
    function hDataDirEditButtondownFcn(hObject, eventdata)
    % Callback called the first time the user presses mouse on the data
    % directory editbox 
        set(hObject,'String','');
        set(hObject,'Enable','on');
        set(hObject,'ButtonDownFcn',[]);        
        uicontrol(hObject);
    end

    %------------------------------------------------------------------
    function hDataDirEditCallback(hObject, eventdata)
    % Callback called when user has changed the data directory name
        datadir = get(hObject,'String');
        if exist(datadir, 'dir') ~= 7
            errordlg(['The given data directory cannot be found ' 10, datadir], ...
                    'Invalid Data Directory', 'modal');
            set(hObject, 'String', 'Set training data directory');
        else
            mDataDir = datadir;
        end
    end

    %------------------------------------------------------------------
    function hDataDirButtonCallback(hObject, eventdata)
    % Callback called when the data directory selection button is pressed
        directoryname = uigetdir(tempDataDir,'Select training data directory...');
        if ~isequal(directoryname,0)
            mDataDir = directoryname;             
            set(hDataDirEdit, 'ButtonDownFcn',[]);            
            set(hDataDirEdit, 'Enable','on');
            if exist(mDataDir,'dir')==7
                set(hDataDirEdit, 'String',mDataDir);            
            end
            
            mSampleData = [];
            localUpdate();            
            
        elseif isempty(mSampleData)
            set(hPredictionControl,'Visible', 'off');            
        end
    end

    %------------------------------------------------------------------
    function hDataFilePrefixEditButtondownFcn(hObject, eventdata)
    % Callback called the first time the user presses mouse on the data
    % directory editbox 
        set(hObject,'String','');
        set(hObject,'Enable','on');
        set(hObject,'ButtonDownFcn',[]);        
        uicontrol(hObject);
    end

    %------------------------------------------------------------------
    function hDataFilePrefixEditCallback(hObject, eventdata)
    % Callback called when user has changed the data filename
        mDataFilePrefix = get(hObject,'String');
        if length(mDataFilePrefix)~=3
            disp('NOTE: For the system to work properly, the prefix should be 3 characters');
            mDataFilePrefix = '';
            set(hObject,'String','Try again...');
        else
            if isempty(mDataDir)
                disp('Must select data directory first.');
                set(hObject,'String','Set filename prefix');
                mDataFilePrefix = '';
            else
                files = what(mDataDir);
                n = 1;
                for i=1:length(files.mat)
                    if strcmp(files.mat{i}(1:3),mDataFilePrefix) && length(files.mat{i})==10 && str2num(files.mat{i}(4:6))>=n
                        n = str2num(files.mat{i}(4:6))+1;
                    end
                end
                filenumber = num2str(n);
                if length(filenumber)==1; filenumber = ['00' filenumber]; end
                if length(filenumber)==2; filenumber = ['0' filenumber]; end
                mDataFile = [mDataFilePrefix filenumber '.mat'];
                set(hDataFilename,'String',mDataFile);
            end
        end
    end

    %------------------------------------------------------------------
    function hStartStopButtonCallback(hObject, eventdata)
    % Callback called when the Start/Stop button is pressed
        
        if strcmp(get(hObject,'String'),'Start Camera') 
            set(hObject,'String','Stop Camera');
            preview(vid,hImage)
            start(vid)
            trigger(vid)
        else
            set(hObject,'String','Start Camera');
            stop(vid)
            stoppreview(vid)
        end
    end

    %------------------------------------------------------------------
    function hCaptureButtonCallback(hObject, eventdata)
    % Callback called when the Capture button is pressed
        frame = getsnapshot(vid);
        if strcmp(get(hDataFilename,'String'),'Set directory and prefix first...')
            disp('Frame not captured. Must set filename first.');
        else
            data = reshape(frame,mVideoWidth*mVideoHeight,1);
            data(end+1) = mGetSignFcn();
            save(fullfile(mDataDir,'\',mDataFile),'data');
            filenumber = num2str(str2num(mDataFile(4:6))+1);
            if length(filenumber)==1; filenumber = ['00' filenumber]; end
            if length(filenumber)==2; filenumber = ['0' filenumber]; end
            mDataFile(4:6) = filenumber;
            set(hDataFilename,'String',mDataFile);
        end

    end

    %------------------------------------------------------------------
    function hExitButtonCallback(hObject, eventdata)
    % Callback called when the Cancel button is pressed
        mSampleData =[];
        uiresume;
        delete(hMainFigure);
    end

    %------------------------------------------------------------------
    function localUpdate
    % helper function that updates the GUI panels

    end

    %------------------------------------------------------------------
    function processUserInputs
    % helper function that processes the input property/value pairs 
    % Apply possible figure and recognizable custom property/value pairs
        for index=1:2:length(mInputArgs)
            if length(mInputArgs) < index+1
                break;
            end
            match = find(ismember({mPropertyDefs{:,1}},mInputArgs{index}));
            if ~isempty(match)  
               % Validate input and assign it to a variable if given
               if ~isempty(mPropertyDefs{match,3}) && ...
                       mPropertyDefs{match,2}(mPropertyDefs{match,1}, ...
                       mInputArgs{index+1})
                   assignin('caller', mPropertyDefs{match,3}, ...
                       mInputArgs{index+1}) 
               end
            else
                try 
                    set(topContainer, ...
                        mInputArgs{index}, mInputArgs{index+1});
                catch
                    % If this is not a valid figure property value pair,
                    % keep the pair and go to the next pair
                    continue;
                end
            end
        end        
    end

    %------------------------------------------------------------------
    function isValid = localValidateInput(property, value)
    % helper function that validates the user provided input property/value
    % pairs. You can choose to show warnings or errors here.
        isValid = false;
        switch lower(property)
            case {'iconwidth', 'iconheight'}
                if isnumeric(value) && value >0
                    isValid = true;
                end
            case 'iconfile'
                if exist(value,'file')==2
                    isValid = true;                    
                end
        end
    end
end % end of aslgui

%------------------------------------------------------------------
function prepareLayout(topContainer)
% This is a utility function that takes care of issues related to
% look&feel and running across multiple platforms. You can reuse
% this function in other GUIs or modify it to fit your needs.
    allObjects = findall(topContainer);
    warning off  %Temporary presentation fix
    try
        titles=get(allObjects(isprop(allObjects,'TitleHandle')), ...
            'TitleHandle');
        allObjects(ismember(allObjects,[titles{:}])) = [];
    catch
    end
    warning on

    % Use the name of this GUI file as the title of the figure
    defaultColor = get(0, 'defaultuicontrolbackgroundcolor');
    if isa(handle(topContainer),'figure')
        set(topContainer,'Name', mfilename, 'NumberTitle','off');
        % Make figure color matches that of GUI objects
        set(topContainer, 'Color',defaultColor);
    end

    % Make GUI objects available to callbacks so that they cannot
    % be changes accidentally by other MATLAB commands
    set(allObjects(isprop(allObjects,'HandleVisibility')), ...
                                     'HandleVisibility', 'Callback');

    % Make the GUI run properly across multiple platforms by using
    % the proper units
    if strcmpi(get(topContainer, 'Resize'),'on')
        set(allObjects(isprop(allObjects,'Units')),'Units','Normalized');
    else
        set(allObjects(isprop(allObjects,'Units')),'Units','Characters');
    end

    % You may want to change the default color of editbox,
    % popupmenu, and listbox to white on Windows 
    if ispc
        candidates = [findobj(allObjects, 'Style','Popupmenu'),...
                           findobj(allObjects, 'Style','Edit'),...
                           findobj(allObjects, 'Style','Listbox')];
        set(findobj(candidates,'BackgroundColor', defaultColor), ...
                               'BackgroundColor','white');
    end
end

